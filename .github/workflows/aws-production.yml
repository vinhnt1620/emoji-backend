name: Deploy to Amazon Production

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}                     # Amazon ECR registry URL: xxx.dkr.ecr.us-east-1.amazonaws.com

  ECR_REPOSITORY: ${{ secrets.PROD_ECR_REPOSITORY }}            # Amazon ECR repository name: emoji-search
  ECS_CLUSTER: ${{ secrets.PROD_ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.PROD_ECS_SERVICE }}
  ECS_TASK_DEFINITION: ${{ secrets.PROD_ECS_TASK_DEFINITION }}  # Amazon ECS task definition name
  DOT_ENV_PARAM: ${{ secrets.PROD_DOT_ENV }}                    # Parameter Store name of .env: emoji-search-dot-env-production

  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}                 # name of the container in the task definition
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Test
      run: |
        echo ${{ env.DOT_ENV_PARAM }}
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v2

    # - name: Build and push image to Amazon ECR
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: . # Assuming Dockerfile is in the root directory
    #     file: ./docker/apache/Dockerfile # Path to Dockerfile
    #     push: false
    #     tags: |
    #       {{ steps.login-ecr.outputs.registry }}/{{ env.ECR_REPOSITORY }}:{{ env.IMAGE_TAG }}
    #     build-args: |
    #       DOT_ENV={{  }}

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REPOSITORY:$IMAGE_TAG -f docker/apache/Dockerfile --build-arg DOT_ENV="$DOT_ENV_PARAM" .
        docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
    - name: Download Task Definition
      run: |
        aws ecs describe-task-definition \
        --task-definition $ECS_TASK_DEFINITION \
        --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
